#!/usr/bin/env sh

die() {
    echo "$*" 1>&2
    exit 1
}

# Verify clipster is running, fail otherwise
clipster -o > /dev/null 2>&1
if [ $? -ne 0 ]; then
    die 'Failed to retrieve history from Clipster, please ensure daemon is running!'
fi

# Parse arguments
if ! OPTIONS=$(getopt -n $PROGRAM_NAME -o p::w::l::f:: \
               -l padding::,width::,location::,font:: -- "$@"); then
    die "Error parsing arguments. Try $PROGRAM_NAME --help"
fi

while [ $# -gt 0 ]; do
    case "$1" in
        -p|-padding)
            PADDING="-padding $2"; shift 2
            ;;
        -w|-width)
            WIDTH="-width $2"; shift 2
            ;;
        -l|-location)
            LOCATION="-location $2"; shift 2
            ;;
        -f|-font)
            FONT="-font '$2'"; shift 2
            ;;
        --)
            # no more arguments to parse
            shift
            break
            ;;
        -*)
            printf "Unknown option %s\n" "$1"
            exit 1
            ;;
        (*)
            break
            ;;
    esac
done

# Extract clipboard history from clipster and format for rofi
#  - Remove Newlines from clips
#  - Limit line length to 200 chars (for display in rofi)
#  - Split into lines based on NUL byte
#  - Remove Leading whitespace
#  - Remove empty clipboard items
#  - Add line numbers to clip items
# NOTE: This is all done in a single line because bash can't store a NUL byte
C_HIST="$(clipster -c -o -n 500 -0 \
        | gawk 'BEGIN {RS = "\0"; ORS = "\0"} NF > 0 { print substr($0, 1, 250) }' \
        | gawk 'BEGIN {RS = "\0"; FS="\n"; OFS=" " } { $1=$1; print $0 }'  \
        | sed 's/^ *//' \
        | gawk '{printf("%003d %s\n", NR, $0)}')"

# Echo clipboard items to Rofi and save the selection made by user
if [[ -t 0 ]]; then
    SELECTION="$(echo "$C_HIST" | fzf-tmux -d 15 --prompt='selection: ')"
else
    SELECTION="$(echo "$C_HIST" | eval "rofi -dmenu -i -lines 20  $PADDING $WIDTH $LOCATION $FONT -p 'item'")"
fi

# Verify user made a selection
if [ -n "$SELECTION" ]; then

    # Retrieve the line number from the beginning of selection and remove leading zeros
    NUMBER="$(echo "$SELECTION" | cut -c1-3 | sed 's/^0*//')"

    # Extract clipboard history from clipster and find the nth non-empty clip based selected line number
    EXACT_SELECTION="$(clipster -c -o -n 500 -0 \
                   | gawk 'BEGIN {RS = "\0"; ORS = "\0"} NF > 0 { print }' \
                   | gawk 'BEGIN {RS = "\0"}'"NR == $NUMBER { print; exit }")"

    # Echo the selection back to clipster
    echo -n "$EXACT_SELECTION" | clipster -c

fi
